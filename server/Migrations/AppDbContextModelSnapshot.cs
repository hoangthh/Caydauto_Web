// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Danh mục Hộp bút - Túi bút chứa các sản phẩm liên quan.",
                            Name = "Hộp bút - Túi bút"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Danh mục Vở Học Sinh Campus chứa các sản phẩm liên quan.",
                            Name = "Vở Học Sinh Campus"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Danh mục Bút gel chứa các sản phẩm liên quan.",
                            Name = "Bút gel"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Danh mục Bút chì chứa các sản phẩm liên quan.",
                            Name = "Bút chì"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Danh mục Bút ghi nhớ chứa các sản phẩm liên quan.",
                            Name = "Bút ghi nhớ"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Danh mục Dụng cụ tẩy chứa các sản phẩm liên quan.",
                            Name = "Dụng cụ tẩy"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Danh mục Bút brush chứa các sản phẩm liên quan.",
                            Name = "Bút brush"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Danh mục Băng keo chứa các sản phẩm liên quan.",
                            Name = "Băng keo"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Danh mục Dụng cụ hỗ trợ chứa các sản phẩm liên quan.",
                            Name = "Dụng cụ hỗ trợ"
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");

                    b.HasData(
                        new
                        {
                            CategoriesId = 6,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 8,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 9,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 9,
                            ProductsId = 2
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 2
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductsId = 2
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 3
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductsId = 3
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 4
                        },
                        new
                        {
                            CategoriesId = 9,
                            ProductsId = 5
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 6,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 7
                        },
                        new
                        {
                            CategoriesId = 7,
                            ProductsId = 8
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 8
                        },
                        new
                        {
                            CategoriesId = 6,
                            ProductsId = 8
                        },
                        new
                        {
                            CategoriesId = 6,
                            ProductsId = 9
                        },
                        new
                        {
                            CategoriesId = 6,
                            ProductsId = 10
                        },
                        new
                        {
                            CategoriesId = 5,
                            ProductsId = 10
                        },
                        new
                        {
                            CategoriesId = 8,
                            ProductsId = 10
                        });
                });

            modelBuilder.Entity("Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Brown"
                        });
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ColorsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ColorProduct");

                    b.HasData(
                        new
                        {
                            ColorsId = 6,
                            ProductsId = 1
                        },
                        new
                        {
                            ColorsId = 1,
                            ProductsId = 2
                        },
                        new
                        {
                            ColorsId = 7,
                            ProductsId = 3
                        },
                        new
                        {
                            ColorsId = 8,
                            ProductsId = 3
                        },
                        new
                        {
                            ColorsId = 1,
                            ProductsId = 4
                        },
                        new
                        {
                            ColorsId = 5,
                            ProductsId = 4
                        },
                        new
                        {
                            ColorsId = 11,
                            ProductsId = 4
                        },
                        new
                        {
                            ColorsId = 5,
                            ProductsId = 5
                        },
                        new
                        {
                            ColorsId = 6,
                            ProductsId = 5
                        },
                        new
                        {
                            ColorsId = 2,
                            ProductsId = 5
                        },
                        new
                        {
                            ColorsId = 6,
                            ProductsId = 6
                        },
                        new
                        {
                            ColorsId = 3,
                            ProductsId = 6
                        },
                        new
                        {
                            ColorsId = 1,
                            ProductsId = 7
                        },
                        new
                        {
                            ColorsId = 9,
                            ProductsId = 7
                        },
                        new
                        {
                            ColorsId = 5,
                            ProductsId = 7
                        },
                        new
                        {
                            ColorsId = 11,
                            ProductsId = 8
                        },
                        new
                        {
                            ColorsId = 10,
                            ProductsId = 8
                        },
                        new
                        {
                            ColorsId = 9,
                            ProductsId = 8
                        },
                        new
                        {
                            ColorsId = 5,
                            ProductsId = 9
                        },
                        new
                        {
                            ColorsId = 3,
                            ProductsId = 10
                        });
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CommentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentImages");
                });

            modelBuilder.Entity("Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=0"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=1000"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=126"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=60"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=559"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=225"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=171"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=27"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=239"
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 1,
                            Url = "https://picsum.photos/500/500/?image=292"
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=417"
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=188"
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=315"
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=247"
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=858"
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=104"
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=284"
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=463"
                        },
                        new
                        {
                            Id = 19,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=1077"
                        },
                        new
                        {
                            Id = 20,
                            ProductId = 2,
                            Url = "https://picsum.photos/500/500/?image=187"
                        },
                        new
                        {
                            Id = 21,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=647"
                        },
                        new
                        {
                            Id = 22,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=912"
                        },
                        new
                        {
                            Id = 23,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=324"
                        },
                        new
                        {
                            Id = 24,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=872"
                        },
                        new
                        {
                            Id = 25,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=949"
                        },
                        new
                        {
                            Id = 26,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=307"
                        },
                        new
                        {
                            Id = 27,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=434"
                        },
                        new
                        {
                            Id = 28,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=608"
                        },
                        new
                        {
                            Id = 29,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=323"
                        },
                        new
                        {
                            Id = 30,
                            ProductId = 3,
                            Url = "https://picsum.photos/500/500/?image=189"
                        },
                        new
                        {
                            Id = 31,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=472"
                        },
                        new
                        {
                            Id = 32,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=776"
                        },
                        new
                        {
                            Id = 33,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=805"
                        },
                        new
                        {
                            Id = 34,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=304"
                        },
                        new
                        {
                            Id = 35,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=979"
                        },
                        new
                        {
                            Id = 36,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=286"
                        },
                        new
                        {
                            Id = 37,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=356"
                        },
                        new
                        {
                            Id = 38,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=732"
                        },
                        new
                        {
                            Id = 39,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=268"
                        },
                        new
                        {
                            Id = 40,
                            ProductId = 4,
                            Url = "https://picsum.photos/500/500/?image=764"
                        },
                        new
                        {
                            Id = 41,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=624"
                        },
                        new
                        {
                            Id = 42,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=761"
                        },
                        new
                        {
                            Id = 43,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=1019"
                        },
                        new
                        {
                            Id = 44,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=655"
                        },
                        new
                        {
                            Id = 45,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=303"
                        },
                        new
                        {
                            Id = 46,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=54"
                        },
                        new
                        {
                            Id = 47,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=843"
                        },
                        new
                        {
                            Id = 48,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=674"
                        },
                        new
                        {
                            Id = 49,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=679"
                        },
                        new
                        {
                            Id = 50,
                            ProductId = 5,
                            Url = "https://picsum.photos/500/500/?image=771"
                        },
                        new
                        {
                            Id = 51,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=857"
                        },
                        new
                        {
                            Id = 52,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=339"
                        },
                        new
                        {
                            Id = 53,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=613"
                        },
                        new
                        {
                            Id = 54,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=254"
                        },
                        new
                        {
                            Id = 55,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=439"
                        },
                        new
                        {
                            Id = 56,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=171"
                        },
                        new
                        {
                            Id = 57,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=15"
                        },
                        new
                        {
                            Id = 58,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=485"
                        },
                        new
                        {
                            Id = 59,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=572"
                        },
                        new
                        {
                            Id = 60,
                            ProductId = 6,
                            Url = "https://picsum.photos/500/500/?image=982"
                        },
                        new
                        {
                            Id = 61,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=1077"
                        },
                        new
                        {
                            Id = 62,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=10"
                        },
                        new
                        {
                            Id = 63,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=1061"
                        },
                        new
                        {
                            Id = 64,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=437"
                        },
                        new
                        {
                            Id = 65,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=2"
                        },
                        new
                        {
                            Id = 66,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=87"
                        },
                        new
                        {
                            Id = 67,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=184"
                        },
                        new
                        {
                            Id = 68,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=462"
                        },
                        new
                        {
                            Id = 69,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=285"
                        },
                        new
                        {
                            Id = 70,
                            ProductId = 7,
                            Url = "https://picsum.photos/500/500/?image=581"
                        },
                        new
                        {
                            Id = 71,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=992"
                        },
                        new
                        {
                            Id = 72,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=176"
                        },
                        new
                        {
                            Id = 73,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=459"
                        },
                        new
                        {
                            Id = 74,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=512"
                        },
                        new
                        {
                            Id = 75,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=16"
                        },
                        new
                        {
                            Id = 76,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=168"
                        },
                        new
                        {
                            Id = 77,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=305"
                        },
                        new
                        {
                            Id = 78,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=453"
                        },
                        new
                        {
                            Id = 79,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=1033"
                        },
                        new
                        {
                            Id = 80,
                            ProductId = 8,
                            Url = "https://picsum.photos/500/500/?image=417"
                        },
                        new
                        {
                            Id = 81,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=508"
                        },
                        new
                        {
                            Id = 82,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=782"
                        },
                        new
                        {
                            Id = 83,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=634"
                        },
                        new
                        {
                            Id = 84,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=931"
                        },
                        new
                        {
                            Id = 85,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=1036"
                        },
                        new
                        {
                            Id = 86,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=355"
                        },
                        new
                        {
                            Id = 87,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=868"
                        },
                        new
                        {
                            Id = 88,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=956"
                        },
                        new
                        {
                            Id = 89,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=399"
                        },
                        new
                        {
                            Id = 90,
                            ProductId = 9,
                            Url = "https://picsum.photos/500/500/?image=361"
                        },
                        new
                        {
                            Id = 91,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=628"
                        },
                        new
                        {
                            Id = 92,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=861"
                        },
                        new
                        {
                            Id = 93,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=410"
                        },
                        new
                        {
                            Id = 94,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=417"
                        },
                        new
                        {
                            Id = 95,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=668"
                        },
                        new
                        {
                            Id = 96,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=438"
                        },
                        new
                        {
                            Id = 97,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=875"
                        },
                        new
                        {
                            Id = 98,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=160"
                        },
                        new
                        {
                            Id = 99,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=853"
                        },
                        new
                        {
                            Id = 100,
                            ProductId = 10,
                            Url = "https://picsum.photos/500/500/?image=601"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DeliveryDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Zebra",
                            CreatedDate = new DateTime(2024, 6, 6, 14, 6, 19, 517, DateTimeKind.Local).AddTicks(59),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Generic Soft Car",
                            Price = 451.596219672537900m,
                            Sold = 19,
                            StockQuantity = 14,
                            UpdatedDate = new DateTime(2025, 3, 28, 2, 39, 22, 758, DateTimeKind.Local).AddTicks(1742)
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Tombow",
                            CreatedDate = new DateTime(2024, 10, 23, 19, 13, 42, 629, DateTimeKind.Local).AddTicks(2169),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Incredible Metal Bike",
                            Price = 396.400895159891500m,
                            Sold = 20,
                            StockQuantity = 71,
                            UpdatedDate = new DateTime(2025, 3, 30, 9, 18, 34, 44, DateTimeKind.Local).AddTicks(4987)
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Stabilo",
                            CreatedDate = new DateTime(2024, 11, 17, 2, 0, 9, 900, DateTimeKind.Local).AddTicks(821),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Name = "Sleek Frozen Pants",
                            Price = 713.887338665028000m,
                            Sold = 14,
                            StockQuantity = 18,
                            UpdatedDate = new DateTime(2025, 3, 26, 13, 4, 6, 376, DateTimeKind.Local).AddTicks(5037)
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Sakura",
                            CreatedDate = new DateTime(2025, 2, 22, 16, 49, 22, 938, DateTimeKind.Local).AddTicks(1859),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Name = "Licensed Rubber Shoes",
                            Price = 473.48093813546500m,
                            Sold = 15,
                            StockQuantity = 97,
                            UpdatedDate = new DateTime(2025, 3, 30, 2, 2, 5, 721, DateTimeKind.Local).AddTicks(2879)
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Zebra",
                            CreatedDate = new DateTime(2024, 12, 2, 6, 2, 46, 305, DateTimeKind.Local).AddTicks(105),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            Name = "Awesome Granite Fish",
                            Price = 677.868806659363000m,
                            Sold = 5,
                            StockQuantity = 0,
                            UpdatedDate = new DateTime(2025, 3, 21, 3, 5, 50, 689, DateTimeKind.Local).AddTicks(2480)
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Kokuyo",
                            CreatedDate = new DateTime(2024, 9, 13, 23, 11, 41, 30, DateTimeKind.Local).AddTicks(6443),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Small Steel Keyboard",
                            Price = 427.732963022223100m,
                            Sold = 14,
                            StockQuantity = 42,
                            UpdatedDate = new DateTime(2025, 3, 22, 10, 41, 58, 18, DateTimeKind.Local).AddTicks(7603)
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Marvy",
                            CreatedDate = new DateTime(2024, 11, 25, 21, 15, 23, 167, DateTimeKind.Local).AddTicks(794),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Name = "Handmade Granite Salad",
                            Price = 31.188464638099480m,
                            Sold = 25,
                            StockQuantity = 60,
                            UpdatedDate = new DateTime(2025, 3, 29, 20, 18, 27, 914, DateTimeKind.Local).AddTicks(7383)
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Tombow",
                            CreatedDate = new DateTime(2024, 10, 24, 4, 26, 51, 895, DateTimeKind.Local).AddTicks(6561),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            Name = "Unbranded Fresh Gloves",
                            Price = 479.270785582693800m,
                            Sold = 14,
                            StockQuantity = 74,
                            UpdatedDate = new DateTime(2025, 3, 21, 14, 33, 53, 513, DateTimeKind.Local).AddTicks(9297)
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Zebra",
                            CreatedDate = new DateTime(2024, 5, 31, 10, 23, 8, 635, DateTimeKind.Local).AddTicks(6027),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            Name = "Fantastic Rubber Bike",
                            Price = 406.9031865307050700m,
                            Sold = 4,
                            StockQuantity = 40,
                            UpdatedDate = new DateTime(2025, 3, 20, 7, 52, 9, 504, DateTimeKind.Local).AddTicks(788)
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Crayola",
                            CreatedDate = new DateTime(2025, 2, 19, 18, 21, 30, 461, DateTimeKind.Local).AddTicks(7642),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Name = "Awesome Soft Tuna",
                            Price = 324.682047772196100m,
                            Sold = 10,
                            StockQuantity = 32,
                            UpdatedDate = new DateTime(2025, 3, 27, 18, 23, 40, 343, DateTimeKind.Local).AddTicks(5384)
                        });
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.Property<int>("WishListedByUsersId")
                        .HasColumnType("int");

                    b.HasKey("WishListId", "WishListedByUsersId");

                    b.HasIndex("WishListedByUsersId");

                    b.ToTable("ProductUser");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.HasOne("Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommentImage", b =>
                {
                    b.HasOne("Comment", "Comment")
                        .WithMany("Images")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.HasOne("Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.HasOne("Product", null)
                        .WithMany()
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("WishListedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
